// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Telegram WebApp SDK
const tg = window.Telegram.WebApp;
tg.ready();

const user = tg.initDataUnsafe?.user;

if (!user || !user.id) {
  alert("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ Telegram. –í—ñ–¥–∫—Ä–∏–π –¥–æ–¥–∞—Ç–æ–∫ –∑ Telegram.");
  throw new Error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π");
}

const userId = user.id;
console.log("‚úÖ Telegram user ID:", userId);

const apiUrl = 'https://habitflow-backend-production.up.railway.app/habits';

document.addEventListener('DOMContentLoaded', loadHabits);

// ======================
// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–≤–∏—á–æ–∫
// ======================
async function loadHabits() {
  try {
    const response = await fetch(`${apiUrl}?user_id=${userId}`);
    if (!response.ok) throw new Error(`–ü–æ–º–∏–ª–∫–∞ ${response.status}`);

    const habits = await response.json();
    const container = document.getElementById('habitList');
    container.innerHTML = '';

    habits.forEach(habit => {
      const card = createHabitCard(habit);
      container.appendChild(card);
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–≤–∏—á–æ–∫:", error);
    alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤–∏—á–∫–∏ üò¢");
  }
}

// ======================
// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–≤–∏—á–∫–∏
// ======================
async function addHabit() {
  const input = document.getElementById('habitInput');
  const title = input.value.trim();
  if (!title) return;

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title, user_id: userId })
    });

    if (!response.ok) {
      const text = await response.text();
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ ${response.status}: ${text}`);
    }

    input.value = '';
    await loadHabits();
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–≤–∏—á–∫–∏:", error);
    alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∑–≤–∏—á–∫—É üò¢");
  }
}

// ======================
// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏
// ======================
function createHabitCard(habit) {
  const card = document.createElement('div');
  card.className = 'habit-card';

  const streakData = habit.streak || generateEmptyStreak();
  const weeksCount = habit.weeks_count || 0;

  card.innerHTML = `
    <div class="habit-title">${escapeHtml(habit.title)}</div>
    <div class="streak-container"></div>
  `;

  const streakContainer = card.querySelector('.streak-container');

  streakData.forEach((status, index) => {
    const circle = document.createElement('div');
    circle.className = 'streak-point';

    if (status === 'done') circle.classList.add('done-today');
    if (status === 'missed') circle.classList.add('missed');

    if (index === streakData.length - 1 && status !== 'done') {
      circle.style.cursor = 'pointer';
      circle.addEventListener('click', async (e) => {
        e.stopPropagation();
        await markTodayDone(habit.id);
      });
    }

    streakContainer.appendChild(circle);
  });

  const weeksDiv = document.createElement('div');
  weeksDiv.className = 'streak-weeks';
  weeksDiv.textContent = weeksCount;
  streakContainer.appendChild(weeksDiv);

  if (weeksCount >= 1) {
    const fire = document.createElement('div');
    fire.className = 'fire-icon';
    streakContainer.appendChild(fire);
  }

  // –î–æ–≤–≥–∏–π —Ç–∞–ø
  let longPressTimer;
  card.addEventListener('touchstart', () => {
    longPressTimer = setTimeout(() => openEditMenu(habit), 600);
  });
  card.addEventListener('touchend', () => clearTimeout(longPressTimer));
  card.addEventListener('touchmove', () => clearTimeout(longPressTimer));

  card.addEventListener('click', () => openHabitDetails(habit));

  return card;
}

// ======================
// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// ======================
function escapeHtml(text) {
  return text.replace(/[&<>"']/g, m => ({
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  })[m]);
}

function generateEmptyStreak() {
  return Array(7).fill('none');
}

async function markTodayDone(habitId) {
  console.log(`‚úÖ –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–≤–∏—á–∫—É —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—É: ${habitId}`);
  // TODO: —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –±–µ–∫–µ–Ω–¥
  await loadHabits();
}

function openEditMenu(habit) {
  if (confirm(`–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ "${habit.title}"?\nOK ‚Äî —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –í—ñ–¥–º—ñ–Ω–∞ ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏.`)) {
    const newTitle = prompt('–í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–∞–∑–≤—É –∑–≤–∏—á–∫–∏:', habit.title);
    if (newTitle && newTitle.trim() !== habit.title) {
      editHabit(habit.id, newTitle.trim());
    }
  } else {
    if (confirm('–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–≤–∏—á–∫—É?')) {
      deleteHabit(habit.id);
    }
  }
}

function openHabitDetails(habit) {
  alert(`–î–µ—Ç–∞–ª—ñ –∑–≤–∏—á–∫–∏:\n${habit.title}\n\n(—Ç—É—Ç –±—É–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)`);
}

async function editHabit(id, newTitle) {
  try {
    await fetch(`${apiUrl}/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title: newTitle, user_id: userId })
    });
    loadHabits();
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ:", error);
  }
}

async function deleteHabit(id) {
  try {
    await fetch(`${apiUrl}/${id}`, { method: 'DELETE' });
    loadHabits();
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ:", error);
  }
}
